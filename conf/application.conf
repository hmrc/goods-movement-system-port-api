# Copyright 2023 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

include "backend.conf"

# This is the main configuration file for the application.
# ~~~~~

appName = goods-movement-system-port-api
appUrl = "http://localhost:8988"

apiContext = customs/goods-movement-system-port
apiVersion = 1.0

api {
  status = "BETA"
}

play.modules.enabled += "uk.gov.hmrc.goodsmovementsystemportapi.config.GuiceModule"

# Provides an implementation of AuditConnector. Use `uk.gov.hmrc.play.bootstrap.AuditModule` or create your own.
# An audit connector must be provided.
play.modules.enabled += "uk.gov.hmrc.play.audit.AuditModule"

# Provides an implementation of MetricsFilter. Use `uk.gov.hmrc.play.graphite.GraphiteMetricsModule` or create your own.
# A metric filter must be provided
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.graphite.GraphiteMetricsModule"


# Provides an implementation and configures all filters required by a Platform frontend microservice.
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.backend.BackendModule"

# Default http client
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.HttpClientModule"


# Json error handler
play.http.errorHandler = "uk.gov.hmrc.goodsmovementsystemportapi.errorhandlers.CustomErrorHandler"

play.modules.enabled += "uk.gov.hmrc.play.bootstrap.AuthModule"


# The application languages
# ~~~~~
play.i18n.langs = ["en"]

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# !!!WARNING!!! DO NOT CHANGE THIS ROUTER
play.http.router = prod.Routes

bootstrap.http.headersAllowlist += "Gvms-Test-Mode"
bootstrap.http.headersAllowlist += "Ignore-Effective-Dates"
bootstrap.http.headersAllowlist += "Test-Scenario"

# Session configuration
# ~~~~~
application.session.httpOnly = false
application.session.secure = false

# Controller
# ~~~~~
# By default all controllers will have authorisation, logging and
# auditing (transaction monitoring) enabled.
# The below controllers are the default exceptions to this rule.

controllers {
  # 300 is the default, you may need to change this according to your needs
  confidenceLevel = 300

  uk.gov.hmrc.goodsmovementsystemportapi.controllers.PortsController = {
    needsAuth = false
    needsLogging = true
    needsAuditing = false
  }

  uk.gov.hmrc.play.health.HealthController = {
    needsAuth = false
    needsLogging = false
    needsAuditing = false
  }
}

# Microservice specific config
features {
  showPending = false
  effectiveDatesCheck = "false"
}

auditing {
  enabled = false
  consumer {
    baseUri {
      host = localhost
      port = 8100
    }
  }
}

microservice {
  services {
    auth {
      host = localhost
      port = 8500
    }

    goods-movement-system {
      host = localhost
      port = 8992
    }

    api-subscription-fields {
      host = localhost
      port = 9650
    }

    goods-movement-system-reference-data {
      host = localhost
      port = 8987
    }
  }
}

